//file:noinspection GroovyAssignabilityCheck -> ignore
plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
	id 'net.neoforged.gradle.userdev' version '7.0.165'
	id 'com.diffplug.spotless' version "7.0.0"
}

version = minecraft_version + "-v" + mod_version + "-" + new Date().format("dd.MM.yyyy")
group = mod_group

base {
	archivesName = "DragonSurvival"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
	configureEach {
		systemProperties 'dragonsurvival.data_generation': 'false'

		systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		systemProperty 'neoforge.logging.markers', 'REGISTRIES'
		systemProperty 'neoforge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		arguments '--username', 'Dev####'
	}

	client_static {
		runType 'client'
		// The UUID is the one that will get assigned in multiplayer based on the name 'Dev'
		arguments '--username', 'Dev', "--uuid", "380df991-f603-344c-a090-369bad2a924a"
	}

	server {
		arguments
	}

	gameTestServer {}

	data {
		systemProperties 'dragonsurvival.data_generation': 'true'
		arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}

	junit {}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { url = "https://maven.createmod.net" } // Create
	// Needed for testing create compat
	/*maven { url = "https://mvn.devos.one/snapshots" } // Registrate (needed for create)
	maven { url = "https://maven.saps.dev/releases" } // FTB Mods (needed for create)
	maven { url = "https://maven.architectury.dev" } // Arch API (needed for create)
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // NeoForge config api port (needed for create)*/
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroup("software.bernie.geckolib")
		}
	}
	maven { /* JEI */ url "https://maven.blamejared.com" }
	maven { /* Curios */ url "https://maven.theillusivec4.top/" }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url "https://api.modrinth.com/maven" }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	// Dependencies
	implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

	// Compatibility
	compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
	runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

	compileOnly "curse.maven:sophisticated-backpacks-422301:6086611"
	compileOnly "curse.maven:sophisticated-core-618298:6119300"

	compileOnly "curse.maven:cosmetic-armor-reworked-237307:5610814"


	// Create (change to implementation to test compat)
	compileOnly "com.simibubi.create:create-${minecraft_version}:${create_version}"

	// Needed for testing create compat
	/*implementation "com.tterrag.registrate:Registrate:${registrate_version}"
	implementation "net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}"
	compileOnly "dev.engine-room.flywheel:flywheel-neoforge-api-${minecraft_version}:${flywheel_version}"
	runtimeOnly "dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}"
	runtimeOnly "dev.architectury:architectury-neoforge:13.0.8"
	implementation "dev.ftb.mods:ftb-chunks-neoforge:2101.1.1"
	implementation "dev.ftb.mods:ftb-teams-neoforge:2101.1.0"
	implementation "dev.ftb.mods:ftb-library-neoforge:2101.1.3"*/

	// Test
	implementation "curse.maven:spark-361579:5759671" // 1.10.109
	implementation "curse.maven:jade-324717:6011258" // 15.9.2

//	implementation "curse.maven:emi-580555:6075440" // 1.1.19

//	implementation "maven.modrinth:sodium:mc1.21.1-0.6.5-neoforge"
//	implementation "curse.maven:irisshaders-455508:5957827" // 1.8.1

//	implementation "curse.maven:apothic-attributes-898963:5751458" // 2.4.0
//	implementation "curse.maven:placebo-283644:5869769" // 9.5.4

	// Curios testing
//     runtimeOnly "top.theillusivec4.curios:curios-neoforge:9.2.2+1.21.1"
	compileOnly "top.theillusivec4.curios:curios-neoforge:9.2.2+1.21.1:api"

	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version           : minecraft_version,
			minecraft_version_range     : minecraft_version_range,
			neo_version                 : neo_version,
			neo_version_range           : neo_version_range,
			loader_version_range        : loader_version_range,
			geckolib_version_range      : geckolib_version_range,
			mod_id                      : mod_id,
			mod_name                    : mod_name,
			mod_license                 : mod_license,
			mod_version                 : mod_version,
			mod_authors                 : mod_authors,
			pack_format_number          : pack_format_number,
	]

	duplicatesStrategy = DuplicatesStrategy.WARN

	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

minecraft {
	accessTransformers {
		file('src/main/resources/META-INF/accesstransformer.cfg')
	}
}

// Enable JUnit in Gradle:
test {
	useJUnitPlatform()
}

// We use spotless for code formatting.
spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}

	java {
		target 'src/*/java/**/*.java'

		// note: '' is for all other imports \\# is a prefix for static
		// There's an empty line between all groups; use | to join without empty lines
		importOrder('', 'javax|java', '\\#')
		removeUnusedImports()
		formatAnnotations()
		leadingTabsToSpaces()
	}
}
